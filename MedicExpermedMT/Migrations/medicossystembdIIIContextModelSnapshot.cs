// <auto-generated />
using System;
using MedicExpermedMT.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicExpermedMT.Migrations
{
    [DbContext(typeof(medicossystembdIIIContext))]
    partial class medicossystembdIIIContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.33")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MedicExpermedMT.Models.AntecedentesFamiliare", b =>
                {
                    b.Property<int>("IdAntecedente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_antecedente");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAntecedente"), 1L, 1);

                    b.Property<bool?>("Cancer")
                        .HasColumnType("bit")
                        .HasColumnName("cancer");

                    b.Property<bool?>("Cardiopatia")
                        .HasColumnType("bit")
                        .HasColumnName("cardiopatia");

                    b.Property<int>("ConsultaId")
                        .HasColumnType("int")
                        .HasColumnName("consulta_id");

                    b.Property<bool?>("Diabetes")
                        .HasColumnType("bit")
                        .HasColumnName("diabetes");

                    b.Property<bool?>("EnfCardiovascular")
                        .HasColumnType("bit")
                        .HasColumnName("enf_cardiovascular");

                    b.Property<bool?>("EnfInfecciosa")
                        .HasColumnType("bit")
                        .HasColumnName("enf_infecciosa");

                    b.Property<bool?>("EnfMental")
                        .HasColumnType("bit")
                        .HasColumnName("enf_mental");

                    b.Property<bool?>("Hipertension")
                        .HasColumnType("bit")
                        .HasColumnName("hipertension");

                    b.Property<bool?>("MalFormacion")
                        .HasColumnType("bit")
                        .HasColumnName("mal_formacion");

                    b.Property<string>("ObserCancer")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("obser_cancer");

                    b.Property<string>("ObserCardiopatia")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("obser_cardiopatia");

                    b.Property<string>("ObserDiabetes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("obser_diabetes");

                    b.Property<string>("ObserEnfCardiovascular")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("obser_enf_cardiovascular");

                    b.Property<string>("ObserEnfInfecciosa")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("obser_enf_infecciosa");

                    b.Property<string>("ObserEnfMental")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("obser_enf_mental");

                    b.Property<string>("ObserHipertension")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("obser_hipertension");

                    b.Property<string>("ObserMalFormacion")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("obser_mal_formacion");

                    b.Property<string>("ObserOtro")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("obser_otro");

                    b.Property<string>("ObserTuberculosis")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("obser_tuberculosis");

                    b.Property<bool?>("Otro")
                        .HasColumnType("bit")
                        .HasColumnName("otro");

                    b.Property<int?>("ParentescocatalogoCancer")
                        .HasColumnType("int")
                        .HasColumnName("parentescocatalogo_cancer");

                    b.Property<int?>("ParentescocatalogoCardiopatia")
                        .HasColumnType("int")
                        .HasColumnName("parentescocatalogo_cardiopatia");

                    b.Property<int?>("ParentescocatalogoDiabetes")
                        .HasColumnType("int")
                        .HasColumnName("parentescocatalogo_diabetes");

                    b.Property<int?>("ParentescocatalogoEnfcardiovascular")
                        .HasColumnType("int")
                        .HasColumnName("parentescocatalogo_enfcardiovascular");

                    b.Property<int?>("ParentescocatalogoEnfinfecciosa")
                        .HasColumnType("int")
                        .HasColumnName("parentescocatalogo_enfinfecciosa");

                    b.Property<int?>("ParentescocatalogoEnfmental")
                        .HasColumnType("int")
                        .HasColumnName("parentescocatalogo_enfmental");

                    b.Property<int?>("ParentescocatalogoHipertension")
                        .HasColumnType("int")
                        .HasColumnName("parentescocatalogo_hipertension");

                    b.Property<int?>("ParentescocatalogoMalformacion")
                        .HasColumnType("int")
                        .HasColumnName("parentescocatalogo_malformacion");

                    b.Property<int?>("ParentescocatalogoOtro")
                        .HasColumnType("int")
                        .HasColumnName("parentescocatalogo_otro");

                    b.Property<int?>("ParentescocatalogoTuberculosis")
                        .HasColumnType("int")
                        .HasColumnName("parentescocatalogo_tuberculosis");

                    b.Property<bool?>("Tuberculosis")
                        .HasColumnType("bit")
                        .HasColumnName("tuberculosis");

                    b.HasKey("IdAntecedente")
                        .HasName("PK__antecede__3E01464147F86EE7");

                    b.HasIndex("ParentescocatalogoCancer");

                    b.HasIndex("ParentescocatalogoCardiopatia");

                    b.HasIndex("ParentescocatalogoDiabetes");

                    b.HasIndex("ParentescocatalogoEnfcardiovascular");

                    b.HasIndex("ParentescocatalogoEnfinfecciosa");

                    b.HasIndex("ParentescocatalogoEnfmental");

                    b.HasIndex("ParentescocatalogoHipertension");

                    b.HasIndex("ParentescocatalogoMalformacion");

                    b.HasIndex("ParentescocatalogoOtro");

                    b.HasIndex("ParentescocatalogoTuberculosis");

                    b.HasIndex(new[] { "ConsultaId" }, "idx_consulta_id_antecedentes");

                    b.ToTable("antecedentes_familiares", (string)null);
                });

            modelBuilder.Entity("MedicExpermedMT.Models.AuditoriaLogin", b =>
                {
                    b.Property<int>("IdAuditoriaLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_auditoria_login");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAuditoriaLogin"), 1L, 1);

                    b.Property<string>("DireccionIp")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("direccion_ip");

                    b.Property<bool>("Exito")
                        .HasColumnType("bit")
                        .HasColumnName("exito");

                    b.Property<DateTime?>("FechaLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_login")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Mensaje")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("mensaje");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_id");

                    b.HasKey("IdAuditoriaLogin")
                        .HasName("PK__auditori__53B2797DB08397A4");

                    b.ToTable("auditoria_login", (string)null);
                });

            modelBuilder.Entity("MedicExpermedMT.Models.Catalogo", b =>
                {
                    b.Property<int>("IdCatalogo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_catalogo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCatalogo"), 1L, 1);

                    b.Property<string>("CategoriaCatalogo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("categoria_catalogo");

                    b.Property<string>("DescripcionCatalogo")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("descripcion_catalogo");

                    b.Property<int>("EstadoCatalogo")
                        .HasColumnType("int")
                        .HasColumnName("estado_catalogo");

                    b.Property<DateTime?>("FechacreacionCatalogo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fechacreacion_catalogo")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("FechamodificacionCatalogo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fechamodificacion_catalogo")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UsuariocreacionCatalogo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("usuariocreacion_catalogo");

                    b.Property<string>("UsuariomodificacionCatalogo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("usuariomodificacion_catalogo");

                    b.Property<Guid>("UuidCatalogo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uuid_catalogo")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("IdCatalogo")
                        .HasName("PK__catalogo__4B673DCAFB313139");

                    b.HasIndex(new[] { "CategoriaCatalogo" }, "idx_categoria_catalogo");

                    b.HasIndex(new[] { "EstadoCatalogo" }, "idx_estado_catalogo");

                    b.ToTable("catalogo", (string)null);
                });

            modelBuilder.Entity("MedicExpermedMT.Models.Citum", b =>
                {
                    b.Property<int>("IdCita")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_cita");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCita"), 1L, 1);

                    b.Property<int?>("ConsultaId")
                        .HasColumnType("int")
                        .HasColumnName("consulta_id");

                    b.Property<int>("EstadoCita")
                        .HasColumnType("int")
                        .HasColumnName("estado_cita");

                    b.Property<DateTime?>("FechacreacionCita")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fechacreacion_cita")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("FechadelacitaCita")
                        .HasColumnType("date")
                        .HasColumnName("fechadelacita_cita");

                    b.Property<TimeSpan?>("HoradelacitaCita")
                        .HasColumnType("time")
                        .HasColumnName("horadelacita_cita");

                    b.Property<string>("Motivo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("motivo");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int")
                        .HasColumnName("paciente_id");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_id");

                    b.Property<string>("UsuariocreacionCita")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("usuariocreacion_cita");

                    b.HasKey("IdCita")
                        .HasName("PK__cita__6AEC3C090A45E308");

                    b.HasIndex(new[] { "ConsultaId" }, "idx_consulta_id_cita");

                    b.HasIndex(new[] { "EstadoCita" }, "idx_estado_cita");

                    b.HasIndex(new[] { "PacienteId" }, "idx_paciente_id_cita");

                    b.HasIndex(new[] { "UsuarioId" }, "idx_usuario_id_cita");

                    b.ToTable("cita", (string)null);
                });

            modelBuilder.Entity("MedicExpermedMT.Models.ConsultaAlergia", b =>
                {
                    b.Property<int>("IdConsultaAlergias")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_consulta_alergias");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdConsultaAlergias"), 1L, 1);

                    b.Property<int?>("CatalogoalergiaId")
                        .HasColumnType("int")
                        .HasColumnName("catalogoalergia_id");

                    b.Property<int>("ConsultaAlergiasInt")
                        .HasColumnType("int")
                        .HasColumnName("consulta_alergias_int");

                    b.Property<int>("EstadoAlergias")
                        .HasColumnType("int")
                        .HasColumnName("estado_alergias");

                    b.Property<DateTime?>("FechacreacionAlergia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fechacreacion_alergia")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObservacionAlergias")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("observacion_alergias");

                    b.Property<int?>("SecuencialAlergias")
                        .HasColumnType("int")
                        .HasColumnName("secuencial_alergias");

                    b.HasKey("IdConsultaAlergias")
                        .HasName("PK__consulta__04246C792E5BD936");

                    b.HasIndex(new[] { "CatalogoalergiaId" }, "idx_catalogoalergia_id");

                    b.HasIndex(new[] { "ConsultaAlergiasInt" }, "idx_consulta_alergias_int");

                    b.HasIndex(new[] { "EstadoAlergias" }, "idx_estado_alergias");

                    b.ToTable("consulta_alergias", (string)null);
                });

            modelBuilder.Entity("MedicExpermedMT.Models.ConsultaCirugia", b =>
                {
                    b.Property<int>("IdConsultaCirugias")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_consulta_cirugias");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdConsultaCirugias"), 1L, 1);

                    b.Property<int?>("CatalogocirugiaId")
                        .HasColumnType("int")
                        .HasColumnName("catalogocirugia_id");

                    b.Property<int>("ConsultaCirugiasId")
                        .HasColumnType("int")
                        .HasColumnName("consulta_cirugias_id");

                    b.Property<int>("EstadoCirugias")
                        .HasColumnType("int")
                        .HasColumnName("estado_cirugias");

                    b.Property<DateTime?>("FechacreacionCirugia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fechacreacion_cirugia")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ObservacionCirugia")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("observacion_cirugia");

                    b.Property<int?>("SecuencialCirugias")
                        .HasColumnType("int")
                        .HasColumnName("secuencial_cirugias");

                    b.HasKey("IdConsultaCirugias")
                        .HasName("PK__consulta__4383EA6F5FAF28A8");

                    b.HasIndex(new[] { "CatalogocirugiaId" }, "idx_catalogocirugia_id");

                    b.HasIndex(new[] { "ConsultaCirugiasId" }, "idx_consulta_cirugias_id");

                    b.HasIndex(new[] { "EstadoCirugias" }, "idx_estado_cirugias");

                    b.ToTable("consulta_cirugias", (string)null);
                });

            modelBuilder.Entity("MedicExpermedMT.Models.ConsultaDiagnostico", b =>
                {
                    b.Property<int>("IdConsultaDiagnostico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_consulta_diagnostico");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdConsultaDiagnostico"), 1L, 1);

                    b.Property<int>("ConsultaDiagnosticoId")
                        .HasColumnType("int")
                        .HasColumnName("consulta_diagnostico_id");

                    b.Property<bool?>("DefinitivoDiagnosticos")
                        .HasColumnType("bit")
                        .HasColumnName("definitivo_diagnosticos");

                    b.Property<int>("DiagnosticoId")
                        .HasColumnType("int")
                        .HasColumnName("diagnostico_id");

                    b.Property<int>("EstadoDiagnostico")
                        .HasColumnType("int")
                        .HasColumnName("estado_diagnostico");

                    b.Property<string>("ObservacionDiagnostico")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("observacion_diagnostico");

                    b.Property<bool?>("PresuntivoDiagnosticos")
                        .HasColumnType("bit")
                        .HasColumnName("presuntivo_diagnosticos");

                    b.Property<int?>("SecuencialDiagnostico")
                        .HasColumnType("int")
                        .HasColumnName("secuencial_diagnostico");

                    b.HasKey("IdConsultaDiagnostico")
                        .HasName("PK__consulta__D8B1E6BDF16A3201");

                    b.HasIndex(new[] { "ConsultaDiagnosticoId" }, "idx_consulta_diagnostico_id");

                    b.HasIndex(new[] { "DiagnosticoId" }, "idx_diagnostico_id");

                    b.HasIndex(new[] { "EstadoDiagnostico" }, "idx_estado_diagnostico");

                    b.ToTable("consulta_diagnostico", (string)null);
                });

            modelBuilder.Entity("MedicExpermedMT.Models.ConsultaImagen", b =>
                {
                    b.Property<int>("IdConsultaImagen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_consulta_imagen");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdConsultaImagen"), 1L, 1);

                    b.Property<int?>("CantidadImagen")
                        .HasColumnType("int")
                        .HasColumnName("cantidad_imagen");

                    b.Property<int>("ConsultaImagenId")
                        .HasColumnType("int")
                        .HasColumnName("consulta_imagen_id");

                    b.Property<int>("EstadoImagen")
                        .HasColumnType("int")
                        .HasColumnName("estado_imagen");

                    b.Property<int>("ImagenId")
                        .HasColumnType("int")
                        .HasColumnName("imagen_id");

                    b.Property<string>("ObservacionImagen")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("observacion_imagen");

                    b.Property<int?>("SecuencialImagen")
                        .HasColumnType("int")
                        .HasColumnName("secuencial_imagen");

                    b.HasKey("IdConsultaImagen")
                        .HasName("PK__consulta__43A0875D9C449380");

                    b.HasIndex(new[] { "ConsultaImagenId" }, "idx_consulta_imagen_id");

                    b.HasIndex(new[] { "EstadoImagen" }, "idx_estado_imagen");

                    b.HasIndex(new[] { "ImagenId" }, "idx_imagen_id");

                    b.ToTable("consulta_imagen", (string)null);
                });

            modelBuilder.Entity("MedicExpermedMT.Models.ConsultaLaboratorio", b =>
                {
                    b.Property<int>("IdLaboratorioConsulta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_laboratorio_consulta");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLaboratorioConsulta"), 1L, 1);

                    b.Property<int?>("CantidadLaboratorio")
                        .HasColumnType("int")
                        .HasColumnName("cantidad_laboratorio");

                    b.Property<int>("CatalogoLaboratorioId")
                        .HasColumnType("int")
                        .HasColumnName("catalogo_laboratorio_id");

                    b.Property<int>("ConsultaLaboratorioId")
                        .HasColumnType("int")
                        .HasColumnName("consulta_laboratorio_id");

                    b.Property<int>("EstadoLaboratorio")
                        .HasColumnType("int")
                        .HasColumnName("estado_laboratorio");

                    b.Property<string>("Observacion")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("observacion");

                    b.Property<int?>("SecuencialLaboratorio")
                        .HasColumnType("int")
                        .HasColumnName("secuencial_laboratorio");

                    b.HasKey("IdLaboratorioConsulta")
                        .HasName("PK__consulta__14E40796F1459D16");

                    b.HasIndex(new[] { "CatalogoLaboratorioId" }, "idx_catalogo_laboratorio_id");

                    b.HasIndex(new[] { "ConsultaLaboratorioId" }, "idx_consulta_laboratorio_id");

                    b.HasIndex(new[] { "EstadoLaboratorio" }, "idx_estado_laboratorio");

                    b.ToTable("consulta_laboratorio", (string)null);
                });

            modelBuilder.Entity("MedicExpermedMT.Models.ConsultaMedicamento", b =>
                {
                    b.Property<int>("IdConsultaMedicamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_consulta_medicamento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdConsultaMedicamento"), 1L, 1);

                    b.Property<int>("ConsultaMedicamentosId")
                        .HasColumnType("int")
                        .HasColumnName("consulta_medicamentos_id");

                    b.Property<string>("DosisMedicamento")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("dosis_medicamento");

                    b.Property<int>("EstadoMedicamento")
                        .HasColumnType("int")
                        .HasColumnName("estado_medicamento");

                    b.Property<DateTime?>("FechacreacionMedicamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fechacreacion_medicamento")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("MedicamentoId")
                        .HasColumnType("int")
                        .HasColumnName("medicamento_id");

                    b.Property<string>("ObservacionMedicamento")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("observacion_medicamento");

                    b.Property<int?>("SecuencialMedicamento")
                        .HasColumnType("int")
                        .HasColumnName("secuencial_medicamento");

                    b.HasKey("IdConsultaMedicamento")
                        .HasName("PK__consulta__12CF73429EC6E7A0");

                    b.HasIndex(new[] { "ConsultaMedicamentosId" }, "idx_consulta_medicamentos_id");

                    b.HasIndex(new[] { "EstadoMedicamento" }, "idx_estado_medicamento");

                    b.HasIndex(new[] { "MedicamentoId" }, "idx_medicamento_id");

                    b.ToTable("consulta_medicamentos", (string)null);
                });

            modelBuilder.Entity("MedicExpermedMT.Models.Consultum", b =>
                {
                    b.Property<int>("IdConsulta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_consulta");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdConsulta"), 1L, 1);

                    b.Property<string>("AntecedentespersonalesConsulta")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("antecedentespersonales_consulta");

                    b.Property<int?>("DiasincapacidadConsulta")
                        .HasColumnType("int")
                        .HasColumnName("diasincapacidad_consulta");

                    b.Property<string>("EnfermedadConsulta")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("enfermedad_consulta");

                    b.Property<int>("EspecialidadId")
                        .HasColumnType("int")
                        .HasColumnName("especialidad_id");

                    b.Property<int>("EstadoConsultaC")
                        .HasColumnType("int")
                        .HasColumnName("estado_consulta_c");

                    b.Property<DateTime?>("FechacreacionConsulta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fechacreacion_consulta")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FrecuenciarespiratoriaConsulta")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("frecuenciarespiratoria_consulta");

                    b.Property<string>("HistorialConsulta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("historial_consulta");

                    b.Property<int>("MedicoConsultaD")
                        .HasColumnType("int")
                        .HasColumnName("medico_consulta_d");

                    b.Property<string>("MotivoConsulta")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("motivo_consulta");

                    b.Property<string>("NombreparienteConsulta")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("nombrepariente_consulta");

                    b.Property<string>("ObservacionConsulta")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("observacion_consulta");

                    b.Property<int>("PacienteConsultaP")
                        .HasColumnType("int")
                        .HasColumnName("paciente_consulta_p");

                    b.Property<string>("PesoConsulta")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("peso_consulta");

                    b.Property<string>("PlantratamientoConsulta")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("plantratamiento_consulta");

                    b.Property<string>("PresionarterialdiastolicaConsulta")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("presionarterialdiastolica_consulta");

                    b.Property<string>("PresionarterialsistolicaConsulta")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("presionarterialsistolica_consulta");

                    b.Property<string>("PulsoConsulta")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("pulso_consulta");

                    b.Property<string>("Reconofarmacologicas")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reconofarmacologicas");

                    b.Property<int?>("SecuencialConsulta")
                        .HasColumnType("int")
                        .HasColumnName("secuencial_consulta");

                    b.Property<string>("SignosalarmaConsulta")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("signosalarma_consulta");

                    b.Property<string>("TallaConsulta")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("talla_consulta");

                    b.Property<string>("TelefonoParienteConsulta")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("telefono_pariente_consulta");

                    b.Property<string>("TemperaturaConsulta")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("temperatura_consulta");

                    b.Property<int?>("TipoparienteConsulta")
                        .HasColumnType("int")
                        .HasColumnName("tipopariente_consulta");

                    b.Property<string>("UsuariocreacionConsulta")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("usuariocreacion_consulta");

                    b.HasKey("IdConsulta")
                        .HasName("PK__consulta__6F53588B443A8E25");

                    b.HasIndex("EspecialidadId");

                    b.HasIndex(new[] { "EstadoConsultaC" }, "idx_estado_consulta_c");

                    b.HasIndex(new[] { "MedicoConsultaD" }, "idx_medico_consulta_d");

                    b.HasIndex(new[] { "PacienteConsultaP" }, "idx_paciente_consulta_p");

                    b.ToTable("consulta", (string)null);
                });

            modelBuilder.Entity("MedicExpermedMT.Models.Diagnostico", b =>
                {
                    b.Property<int>("IdDiagnostico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_diagnostico");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDiagnostico"), 1L, 1);

                    b.Property<string>("CategoriaDiagnostico")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("categoria_diagnostico");

                    b.Property<string>("DescripcionDiagnostico")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("descripcion_diagnostico");

                    b.Property<int>("EstadoDiagnostico")
                        .HasColumnType("int")
                        .HasColumnName("estado_diagnostico");

                    b.Property<string>("NombreDiagnostico")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("nombre_diagnostico");

                    b.Property<string>("UuidDiagnostico")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("uuid_diagnostico");

                    b.HasKey("IdDiagnostico")
                        .HasName("PK__diagnost__1384B745F05B3F12");

                    b.HasIndex(new[] { "UuidDiagnostico" }, "UQ__diagnost__A5CF086EBD7B0A20")
                        .IsUnique();

                    b.HasIndex(new[] { "EstadoDiagnostico" }, "idx_estado_diagnostico")
                        .HasDatabaseName("idx_estado_diagnostico1");

                    b.HasIndex(new[] { "NombreDiagnostico" }, "idx_nombre_diagnostico");

                    b.ToTable("diagnostico", (string)null);
                });

            modelBuilder.Entity("MedicExpermedMT.Models.Especialidad", b =>
                {
                    b.Property<int>("IdEspecialidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_especialidad");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEspecialidad"), 1L, 1);

                    b.Property<string>("CategoriaEspecialidad")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("categoria_especialidad");

                    b.Property<string>("DescripcionEspecialidad")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("descripcion_especialidad");

                    b.Property<int>("EstadoEspecialidad")
                        .HasColumnType("int")
                        .HasColumnName("estado_especialidad");

                    b.Property<string>("NombreEspecialidad")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("nombre_especialidad");

                    b.Property<Guid>("UuidEspecialidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uuid_especialidad")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("IdEspecialidad")
                        .HasName("PK__especial__C1D137632C972C94");

                    b.HasIndex(new[] { "EstadoEspecialidad" }, "idx_estado_especialidad");

                    b.HasIndex(new[] { "NombreEspecialidad" }, "idx_nombre_especialidad");

                    b.ToTable("especialidad", (string)null);
                });

            modelBuilder.Entity("MedicExpermedMT.Models.Establecimiento", b =>
                {
                    b.Property<int>("IdEstablecimiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_establecimiento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEstablecimiento"), 1L, 1);

                    b.Property<string>("CiudadEstablecimiento")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ciudad_establecimiento");

                    b.Property<string>("DescripcionEstablecimiento")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("descripcion_establecimiento");

                    b.Property<string>("DireccionEstablecimiento")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("direccion_establecimiento");

                    b.Property<int>("EstadoEstablecimiento")
                        .HasColumnType("int")
                        .HasColumnName("estado_establecimiento");

                    b.Property<DateTime?>("FechacreacionEstablecimiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fechacreacion_establecimiento")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("FechamodificacionEstablecimiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fechamodificacion_establecimiento")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ProvinciaEstablecimiento")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("provincia_establecimiento");

                    b.HasKey("IdEstablecimiento")
                        .HasName("PK__establec__AFEAEA2093D0B46B");

                    b.HasIndex(new[] { "CiudadEstablecimiento" }, "idx_ciudad_establecimiento");

                    b.HasIndex(new[] { "EstadoEstablecimiento" }, "idx_estado_establecimiento");

                    b.ToTable("establecimiento", (string)null);
                });

            modelBuilder.Entity("MedicExpermedMT.Models.ExamenFisico", b =>
                {
                    b.Property<int>("IdExamenFisico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_examen_fisico");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdExamenFisico"), 1L, 1);

                    b.Property<bool?>("Abdomen")
                        .HasColumnType("bit")
                        .HasColumnName("abdomen");

                    b.Property<bool?>("Cabeza")
                        .HasColumnType("bit")
                        .HasColumnName("cabeza");

                    b.Property<int>("ConsultaId")
                        .HasColumnType("int")
                        .HasColumnName("consulta_id");

                    b.Property<bool?>("Cuello")
                        .HasColumnType("bit")
                        .HasColumnName("cuello");

                    b.Property<bool?>("Extremidades")
                        .HasColumnType("bit")
                        .HasColumnName("extremidades");

                    b.Property<string>("ObserAbdomen")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("obser_abdomen");

                    b.Property<string>("ObserCabeza")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("obser_cabeza");

                    b.Property<string>("ObserCuello")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("obser_cuello");

                    b.Property<string>("ObserExtremidades")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("obser_extremidades");

                    b.Property<string>("ObserPelvis")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("obser_pelvis");

                    b.Property<string>("ObserTorax")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("obser_torax");

                    b.Property<bool?>("Pelvis")
                        .HasColumnType("bit")
                        .HasColumnName("pelvis");

                    b.Property<bool?>("Torax")
                        .HasColumnType("bit")
                        .HasColumnName("torax");

                    b.HasKey("IdExamenFisico")
                        .HasName("PK__examen_f__B5B777B9C783C962");

                    b.HasIndex(new[] { "ConsultaId" }, "idx_consulta_id_examen");

                    b.ToTable("examen_fisico", (string)null);
                });

            modelBuilder.Entity("MedicExpermedMT.Models.Facturacion", b =>
                {
                    b.Property<int>("IdFacturacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_facturacion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFacturacion"), 1L, 1);

                    b.Property<int>("CitaId")
                        .HasColumnType("int")
                        .HasColumnName("cita_id");

                    b.Property<string>("EstadoFactura")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("estado_factura");

                    b.Property<DateTime>("FechaFacturacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_facturacion")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("MetodoPago")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("metodo_pago");

                    b.Property<decimal>("TotalFactura")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_factura");

                    b.HasKey("IdFacturacion")
                        .HasName("PK__facturac__AC4FC894466372E4");

                    b.HasIndex(new[] { "CitaId" }, "idx_cita_id_facturacion");

                    b.ToTable("facturacion", (string)null);
                });

            modelBuilder.Entity("MedicExpermedMT.Models.Imagen", b =>
                {
                    b.Property<int>("IdImagen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_imagen");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdImagen"), 1L, 1);

                    b.Property<string>("CategoriaImagen")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("categoria_imagen");

                    b.Property<string>("DescripcionImagen")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("descripcion_imagen");

                    b.Property<int>("EstadoImagen")
                        .HasColumnType("int")
                        .HasColumnName("estado_imagen");

                    b.Property<string>("NombreImagen")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("nombre_imagen");

                    b.Property<string>("UuidImagen")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("uuid_imagen");

                    b.HasKey("IdImagen")
                        .HasName("PK__imagen__27CC26890C47734E");

                    b.HasIndex(new[] { "UuidImagen" }, "UQ__imagen__448604A0BED75E6D")
                        .IsUnique();

                    b.HasIndex(new[] { "EstadoImagen" }, "idx_estado_imagen")
                        .HasDatabaseName("idx_estado_imagen1");

                    b.HasIndex(new[] { "NombreImagen" }, "idx_nombre_imagen");

                    b.ToTable("imagen", (string)null);
                });

            modelBuilder.Entity("MedicExpermedMT.Models.Laboratorio", b =>
                {
                    b.Property<int>("IdLaboratorio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_laboratorio");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLaboratorio"), 1L, 1);

                    b.Property<string>("CategoriaLaboratorios")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("categoria_laboratorios");

                    b.Property<string>("DescripcionLaboratorio")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("descripcion_laboratorio");

                    b.Property<int>("EstadoLaboratorios")
                        .HasColumnType("int")
                        .HasColumnName("estado_laboratorios");

                    b.Property<string>("NombreLaboratorio")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("nombre_laboratorio");

                    b.Property<string>("UuidLaboratorios")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("uuid_laboratorios");

                    b.HasKey("IdLaboratorio")
                        .HasName("PK__laborato__781B42E2F4B0A54C");

                    b.HasIndex(new[] { "UuidLaboratorios" }, "UQ__laborato__4D3AAC17EEE29786")
                        .IsUnique();

                    b.HasIndex(new[] { "EstadoLaboratorios" }, "idx_estado_laboratorios");

                    b.HasIndex(new[] { "NombreLaboratorio" }, "idx_nombre_laboratorio");

                    b.ToTable("laboratorio", (string)null);
                });

            modelBuilder.Entity("MedicExpermedMT.Models.Localidad", b =>
                {
                    b.Property<int>("IdLocalidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_localidad");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLocalidad"), 1L, 1);

                    b.Property<string>("CiaLocalidad")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("cia_localidad");

                    b.Property<string>("CodigoLocalidad")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("codigo_localidad");

                    b.Property<int>("EstadoLocalidad")
                        .HasColumnType("int")
                        .HasColumnName("estado_localidad");

                    b.Property<DateTime?>("FechacreacionLocalidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fechacreacion_localidad")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("FechamodificacionLocalidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fechamodificacion_localidad")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("GentilicioLocalidad")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("gentilicio_localidad");

                    b.Property<string>("IsoLocalidad")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("iso_localidad");

                    b.Property<string>("IsoadLocalidad")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("isoad_localidad");

                    b.Property<string>("NombreLocalidad")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("nombre_localidad");

                    b.Property<int?>("PaisId")
                        .HasColumnType("int")
                        .HasColumnName("pais_id");

                    b.Property<string>("PrefijoLocalidad")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("prefijo_localidad");

                    b.Property<string>("UsuariocreacionLocalidad")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("usuariocreacion_localidad");

                    b.Property<string>("UsuariomodificacionLocalidad")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("usuariomodificacion_localidad");

                    b.HasKey("IdLocalidad")
                        .HasName("PK__localida__9A5E82AAF641E79A");

                    b.HasIndex("PaisId");

                    b.HasIndex(new[] { "EstadoLocalidad" }, "idx_estado_localidad");

                    b.HasIndex(new[] { "NombreLocalidad" }, "idx_nombre_localidad");

                    b.ToTable("localidad", (string)null);
                });

            modelBuilder.Entity("MedicExpermedMT.Models.Medicamento", b =>
                {
                    b.Property<int>("IdMedicamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_medicamento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMedicamento"), 1L, 1);

                    b.Property<string>("CategoriaMedicamento")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("categoria_medicamento");

                    b.Property<string>("ConcentracionMedicamento")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("concentracion_medicamento");

                    b.Property<string>("DescripcionMedicamento")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("descripcion_medicamento");

                    b.Property<string>("DistintivoMedicamento")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("distintivo_medicamento");

                    b.Property<int>("EstadoMedicamento")
                        .HasColumnType("int")
                        .HasColumnName("estado_medicamento");

                    b.Property<string>("NombreMedicamento")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("nombre_medicamento");

                    b.Property<string>("UuidMedicamento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("uuid_medicamento");

                    b.HasKey("IdMedicamento")
                        .HasName("PK__medicame__2588C032C3A058E2");

                    b.HasIndex(new[] { "UuidMedicamento" }, "UQ__medicame__307E4C1D49D0EF60")
                        .IsUnique();

                    b.HasIndex(new[] { "EstadoMedicamento" }, "idx_estado_medicamento")
                        .HasDatabaseName("idx_estado_medicamento1");

                    b.HasIndex(new[] { "NombreMedicamento" }, "idx_nombre_medicamento");

                    b.ToTable("medicamentos", (string)null);
                });

            modelBuilder.Entity("MedicExpermedMT.Models.OrganosSistema", b =>
                {
                    b.Property<int>("IdOrganosSistemas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_organos_sistemas");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdOrganosSistemas"), 1L, 1);

                    b.Property<bool?>("CardioVascular")
                        .HasColumnType("bit")
                        .HasColumnName("cardio_vascular");

                    b.Property<int>("ConsultaId")
                        .HasColumnType("int")
                        .HasColumnName("consulta_id");

                    b.Property<bool?>("Digestivo")
                        .HasColumnType("bit")
                        .HasColumnName("digestivo");

                    b.Property<bool?>("Endocrino")
                        .HasColumnType("bit")
                        .HasColumnName("endocrino");

                    b.Property<bool?>("Genital")
                        .HasColumnType("bit")
                        .HasColumnName("genital");

                    b.Property<bool?>("Linfatico")
                        .HasColumnType("bit")
                        .HasColumnName("linfatico");

                    b.Property<bool?>("MEsqueletico")
                        .HasColumnType("bit")
                        .HasColumnName("m_esqueletico");

                    b.Property<bool?>("Nervioso")
                        .HasColumnType("bit")
                        .HasColumnName("nervioso");

                    b.Property<string>("ObserCardioVascular")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("obser_cardio_vascular");

                    b.Property<string>("ObserDigestivo")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("obser_digestivo");

                    b.Property<string>("ObserEndocrino")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("obser_endocrino");

                    b.Property<string>("ObserGenital")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("obser_genital");

                    b.Property<string>("ObserLinfatico")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("obser_linfatico");

                    b.Property<string>("ObserMEsqueletico")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("obser_m_esqueletico");

                    b.Property<string>("ObserNervioso")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("obser_nervioso");

                    b.Property<string>("ObserOrgSentidos")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("obser_org_sentidos");

                    b.Property<string>("ObserRespiratorio")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("obser_respiratorio");

                    b.Property<string>("ObserUrinario")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("obser_urinario");

                    b.Property<bool?>("OrgSentidos")
                        .HasColumnType("bit")
                        .HasColumnName("org_sentidos");

                    b.Property<bool?>("Respiratorio")
                        .HasColumnType("bit")
                        .HasColumnName("respiratorio");

                    b.Property<bool?>("Urinario")
                        .HasColumnType("bit")
                        .HasColumnName("urinario");

                    b.HasKey("IdOrganosSistemas")
                        .HasName("PK__organos___222F23833360B62C");

                    b.HasIndex(new[] { "ConsultaId" }, "idx_consulta_id_organos");

                    b.ToTable("organos_sistemas", (string)null);
                });

            modelBuilder.Entity("MedicExpermedMT.Models.Paciente", b =>
                {
                    b.Property<int>("IdPacientes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_pacientes");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPacientes"), 1L, 1);

                    b.Property<int>("CiPacientes")
                        .HasColumnType("int")
                        .HasColumnName("ci_pacientes");

                    b.Property<string>("DireccionPacientes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("direccion_pacientes");

                    b.Property<string>("DonantePacientes")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("donante_pacientes");

                    b.Property<int?>("EdadPacientes")
                        .HasColumnType("int")
                        .HasColumnName("edad_pacientes");

                    b.Property<string>("EmailPacientes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email_pacientes");

                    b.Property<string>("EmpresaPacientes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("empresa_pacientes");

                    b.Property<int>("EstadoPacientes")
                        .HasColumnType("int")
                        .HasColumnName("estado_pacientes");

                    b.Property<int?>("EstadocivilPacientesCa")
                        .HasColumnType("int")
                        .HasColumnName("estadocivil_pacientes_ca");

                    b.Property<DateTime?>("FechacreacionPacientes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fechacreacion_pacientes")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("FechamodificacionPacientes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fechamodificacion_pacientes")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("FechanacimientoPacientes")
                        .HasColumnType("date")
                        .HasColumnName("fechanacimiento_pacientes");

                    b.Property<int?>("FormacionprofesionalPacientesCa")
                        .HasColumnType("int")
                        .HasColumnName("formacionprofesional_pacientes_ca");

                    b.Property<int?>("NacionalidadPacientesPa")
                        .HasColumnType("int")
                        .HasColumnName("nacionalidad_pacientes_pa");

                    b.Property<string>("OcupacionPacientes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ocupacion_pacientes");

                    b.Property<string>("PrimerapellidoPacientes")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("primerapellido_pacientes");

                    b.Property<string>("PrimernombrePacientes")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("primernombre_pacientes");

                    b.Property<int?>("ProvinciaPacientesL")
                        .HasColumnType("int")
                        .HasColumnName("provincia_pacientes_l");

                    b.Property<string>("SegundoapellidoPacientes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("segundoapellido_pacientes");

                    b.Property<string>("SegundonombrePacientes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("segundonombre_pacientes");

                    b.Property<int?>("SegurosaludPacientesCa")
                        .HasColumnType("int")
                        .HasColumnName("segurosalud_pacientes_ca");

                    b.Property<int?>("SexoPacientesCa")
                        .HasColumnType("int")
                        .HasColumnName("sexo_pacientes_ca");

                    b.Property<string>("TelefonocelularPacientes")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("telefonocelular_pacientes");

                    b.Property<string>("TelefonofijoPacientes")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("telefonofijo_pacientes");

                    b.Property<int?>("TipodocumentoPacientesCa")
                        .HasColumnType("int")
                        .HasColumnName("tipodocumento_pacientes_ca");

                    b.Property<int?>("TiposangrePacientesCa")
                        .HasColumnType("int")
                        .HasColumnName("tiposangre_pacientes_ca");

                    b.Property<string>("UsuariocreacionPacientes")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("usuariocreacion_pacientes");

                    b.Property<string>("UsuariomodificacionPacientes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("usuariomodificacion_pacientes");

                    b.HasKey("IdPacientes")
                        .HasName("PK__paciente__D80336DA83EF9D4A");

                    b.HasIndex("EstadocivilPacientesCa");

                    b.HasIndex("FormacionprofesionalPacientesCa");

                    b.HasIndex("NacionalidadPacientesPa");

                    b.HasIndex("ProvinciaPacientesL");

                    b.HasIndex("SegurosaludPacientesCa");

                    b.HasIndex("SexoPacientesCa");

                    b.HasIndex("TipodocumentoPacientesCa");

                    b.HasIndex("TiposangrePacientesCa");

                    b.HasIndex(new[] { "CiPacientes" }, "UQ__paciente__47B248370877C4FE")
                        .IsUnique();

                    b.HasIndex(new[] { "CiPacientes" }, "idx_ci_pacientes");

                    b.HasIndex(new[] { "EstadoPacientes" }, "idx_estado_pacientes");

                    b.HasIndex(new[] { "PrimerapellidoPacientes" }, "idx_primerapellido_pacientes");

                    b.HasIndex(new[] { "PrimernombrePacientes" }, "idx_primernombre_pacientes");

                    b.ToTable("pacientes", (string)null);
                });

            modelBuilder.Entity("MedicExpermedMT.Models.Pai", b =>
                {
                    b.Property<int>("IdPais")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_pais");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPais"), 1L, 1);

                    b.Property<string>("CodigoPais")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("codigo_pais");

                    b.Property<int>("EstadoPais")
                        .HasColumnType("int")
                        .HasColumnName("estado_pais");

                    b.Property<string>("GentilicioPais")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("gentilicio_pais");

                    b.Property<string>("IsoPais")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("iso_pais");

                    b.Property<string>("NombrePais")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("nombre_pais");

                    b.HasKey("IdPais")
                        .HasName("PK__pais__0941A3A74C5D1C64");

                    b.HasIndex(new[] { "IsoPais" }, "UQ__pais__5515698EF912A078")
                        .IsUnique();

                    b.HasIndex(new[] { "EstadoPais" }, "idx_estado_pais");

                    b.HasIndex(new[] { "NombrePais" }, "idx_nombre_pais");

                    b.ToTable("pais", (string)null);
                });

            modelBuilder.Entity("MedicExpermedMT.Models.Perfil", b =>
                {
                    b.Property<int>("IdPerfil")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_perfil");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPerfil"), 1L, 1);

                    b.Property<string>("DescripcionPerfil")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("descripcion_perfil");

                    b.Property<int>("EstadoPerfil")
                        .HasColumnType("int")
                        .HasColumnName("estado_perfil");

                    b.Property<DateTime>("FechacreacionPerfil")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fechacreacion_perfil")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("NombrePerfil")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("nombre_perfil");

                    b.HasKey("IdPerfil")
                        .HasName("PK__perfil__1D1C87687E96A9D9");

                    b.HasIndex(new[] { "EstadoPerfil" }, "idx_estado_perfil");

                    b.HasIndex(new[] { "NombrePerfil" }, "idx_nombre_perfil");

                    b.ToTable("perfil", (string)null);
                });

            modelBuilder.Entity("MedicExpermedMT.Models.TokensSesion", b =>
                {
                    b.Property<string>("Token")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("token");

                    b.Property<DateTime>("FechaExpiracion")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_expiracion");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_id");

                    b.HasKey("Token")
                        .HasName("PK__tokens_s__CA90DA7B264B8294");

                    b.HasIndex("UsuarioId");

                    b.ToTable("tokens_sesion", (string)null);
                });

            modelBuilder.Entity("MedicExpermedMT.Models.Usuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUsuario"), 1L, 1);

                    b.Property<string>("ApellidosUsuario")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("apellidos_usuario");

                    b.Property<int>("CiUsuario")
                        .HasColumnType("int")
                        .HasColumnName("ci_usuario");

                    b.Property<byte[]>("ClaveUsuario")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("clave_usuario");

                    b.Property<string>("CodigoSenecyt")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("codigo_senecyt");

                    b.Property<string>("CodigoUsuario")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("codigo_usuario");

                    b.Property<byte[]>("CodigoqrUsuario")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("codigoqr_usuario");

                    b.Property<string>("DireccionUsuario")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("direccion_usuario");

                    b.Property<string>("EmailUsuario")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email_usuario");

                    b.Property<int?>("EspecialidadId")
                        .HasColumnType("int")
                        .HasColumnName("especialidad_id");

                    b.Property<int?>("EstablecimientoId")
                        .HasColumnType("int")
                        .HasColumnName("establecimiento_id");

                    b.Property<int>("EstadoUsuario")
                        .HasColumnType("int")
                        .HasColumnName("estado_usuario");

                    b.Property<DateTime?>("FechacreacionUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fechacreacion_usuario")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("FechamodificacionUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fechamodificacion_usuario")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte[]>("FirmadigitalUsuario")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("firmadigital_usuario");

                    b.Property<int?>("IntentosFallidos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("intentos_fallidos")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("LoginUsuario")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("login_usuario");

                    b.Property<string>("NombresUsuario")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("nombres_usuario");

                    b.Property<int?>("PerfilId")
                        .HasColumnType("int")
                        .HasColumnName("perfil_id");

                    b.Property<string>("TelefonoUsuario")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("telefono_usuario");

                    b.HasKey("IdUsuario")
                        .HasName("PK__usuario__4E3E04AD3DFE2140");

                    b.HasIndex("EspecialidadId");

                    b.HasIndex("EstablecimientoId");

                    b.HasIndex("PerfilId");

                    b.HasIndex(new[] { "CiUsuario" }, "UQ__usuario__38AEB2A8C61AEF3F")
                        .IsUnique();

                    b.HasIndex(new[] { "EmailUsuario" }, "UQ__usuario__CD3151FFBB29EE37")
                        .IsUnique();

                    b.HasIndex(new[] { "ApellidosUsuario" }, "idx_apellidos_usuario");

                    b.HasIndex(new[] { "CiUsuario" }, "idx_ci_usuario");

                    b.HasIndex(new[] { "EmailUsuario" }, "idx_email_usuario");

                    b.HasIndex(new[] { "EstadoUsuario" }, "idx_estado_usuario");

                    b.HasIndex(new[] { "NombresUsuario" }, "idx_nombres_usuario");

                    b.ToTable("usuario", (string)null);
                });

            modelBuilder.Entity("MedicExpermedMT.Models.AntecedentesFamiliare", b =>
                {
                    b.HasOne("MedicExpermedMT.Models.Consultum", "Consulta")
                        .WithMany("AntecedentesFamiliares")
                        .HasForeignKey("ConsultaId")
                        .IsRequired()
                        .HasConstraintName("FK_antecedentes_familiares_consulta");

                    b.HasOne("MedicExpermedMT.Models.Catalogo", "ParentescocatalogoCancerNavigation")
                        .WithMany("AntecedentesFamiliareParentescocatalogoCancerNavigations")
                        .HasForeignKey("ParentescocatalogoCancer")
                        .HasConstraintName("FK_catalogo_cancer");

                    b.HasOne("MedicExpermedMT.Models.Catalogo", "ParentescocatalogoCardiopatiaNavigation")
                        .WithMany("AntecedentesFamiliareParentescocatalogoCardiopatiaNavigations")
                        .HasForeignKey("ParentescocatalogoCardiopatia")
                        .HasConstraintName("FK_catalogo_cardiopatia");

                    b.HasOne("MedicExpermedMT.Models.Catalogo", "ParentescocatalogoDiabetesNavigation")
                        .WithMany("AntecedentesFamiliareParentescocatalogoDiabetesNavigations")
                        .HasForeignKey("ParentescocatalogoDiabetes")
                        .HasConstraintName("FK_catalogo_diabetes");

                    b.HasOne("MedicExpermedMT.Models.Catalogo", "ParentescocatalogoEnfcardiovascularNavigation")
                        .WithMany("AntecedentesFamiliareParentescocatalogoEnfcardiovascularNavigations")
                        .HasForeignKey("ParentescocatalogoEnfcardiovascular")
                        .HasConstraintName("FK_catalogo_enfcardiovascular");

                    b.HasOne("MedicExpermedMT.Models.Catalogo", "ParentescocatalogoEnfinfecciosaNavigation")
                        .WithMany("AntecedentesFamiliareParentescocatalogoEnfinfecciosaNavigations")
                        .HasForeignKey("ParentescocatalogoEnfinfecciosa")
                        .HasConstraintName("FK_catalogo_enfinfecciosa");

                    b.HasOne("MedicExpermedMT.Models.Catalogo", "ParentescocatalogoEnfmentalNavigation")
                        .WithMany("AntecedentesFamiliareParentescocatalogoEnfmentalNavigations")
                        .HasForeignKey("ParentescocatalogoEnfmental")
                        .HasConstraintName("FK_catalogo_enfmental");

                    b.HasOne("MedicExpermedMT.Models.Catalogo", "ParentescocatalogoHipertensionNavigation")
                        .WithMany("AntecedentesFamiliareParentescocatalogoHipertensionNavigations")
                        .HasForeignKey("ParentescocatalogoHipertension")
                        .HasConstraintName("FK_catalogo_hipertension");

                    b.HasOne("MedicExpermedMT.Models.Catalogo", "ParentescocatalogoMalformacionNavigation")
                        .WithMany("AntecedentesFamiliareParentescocatalogoMalformacionNavigations")
                        .HasForeignKey("ParentescocatalogoMalformacion")
                        .HasConstraintName("FK_catalogo_malformacion");

                    b.HasOne("MedicExpermedMT.Models.Catalogo", "ParentescocatalogoOtroNavigation")
                        .WithMany("AntecedentesFamiliareParentescocatalogoOtroNavigations")
                        .HasForeignKey("ParentescocatalogoOtro")
                        .HasConstraintName("FK_catalogo_otro");

                    b.HasOne("MedicExpermedMT.Models.Catalogo", "ParentescocatalogoTuberculosisNavigation")
                        .WithMany("AntecedentesFamiliareParentescocatalogoTuberculosisNavigations")
                        .HasForeignKey("ParentescocatalogoTuberculosis")
                        .HasConstraintName("FK_catalogo_tuberculosis");

                    b.Navigation("Consulta");

                    b.Navigation("ParentescocatalogoCancerNavigation");

                    b.Navigation("ParentescocatalogoCardiopatiaNavigation");

                    b.Navigation("ParentescocatalogoDiabetesNavigation");

                    b.Navigation("ParentescocatalogoEnfcardiovascularNavigation");

                    b.Navigation("ParentescocatalogoEnfinfecciosaNavigation");

                    b.Navigation("ParentescocatalogoEnfmentalNavigation");

                    b.Navigation("ParentescocatalogoHipertensionNavigation");

                    b.Navigation("ParentescocatalogoMalformacionNavigation");

                    b.Navigation("ParentescocatalogoOtroNavigation");

                    b.Navigation("ParentescocatalogoTuberculosisNavigation");
                });

            modelBuilder.Entity("MedicExpermedMT.Models.Citum", b =>
                {
                    b.HasOne("MedicExpermedMT.Models.Consultum", "Consulta")
                        .WithMany("Cita")
                        .HasForeignKey("ConsultaId")
                        .HasConstraintName("FK_cita_consulta");

                    b.HasOne("MedicExpermedMT.Models.Paciente", "Paciente")
                        .WithMany("Cita")
                        .HasForeignKey("PacienteId")
                        .IsRequired()
                        .HasConstraintName("FK_cita_paciente");

                    b.HasOne("MedicExpermedMT.Models.Usuario", "Usuario")
                        .WithMany("Cita")
                        .HasForeignKey("UsuarioId")
                        .IsRequired()
                        .HasConstraintName("FK_cita_usuario");

                    b.Navigation("Consulta");

                    b.Navigation("Paciente");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("MedicExpermedMT.Models.ConsultaAlergia", b =>
                {
                    b.HasOne("MedicExpermedMT.Models.Catalogo", "Catalogoalergia")
                        .WithMany("ConsultaAlergia")
                        .HasForeignKey("CatalogoalergiaId")
                        .HasConstraintName("FK_catalogo_alergias");

                    b.HasOne("MedicExpermedMT.Models.Consultum", "ConsultaAlergiasIntNavigation")
                        .WithMany("ConsultaAlergia")
                        .HasForeignKey("ConsultaAlergiasInt")
                        .IsRequired()
                        .HasConstraintName("FK_consulta_alergias");

                    b.Navigation("Catalogoalergia");

                    b.Navigation("ConsultaAlergiasIntNavigation");
                });

            modelBuilder.Entity("MedicExpermedMT.Models.ConsultaCirugia", b =>
                {
                    b.HasOne("MedicExpermedMT.Models.Catalogo", "Catalogocirugia")
                        .WithMany("ConsultaCirugia")
                        .HasForeignKey("CatalogocirugiaId")
                        .HasConstraintName("FK_catalogo_cirugias");

                    b.HasOne("MedicExpermedMT.Models.Consultum", "ConsultaCirugias")
                        .WithMany("ConsultaCirugia")
                        .HasForeignKey("ConsultaCirugiasId")
                        .IsRequired()
                        .HasConstraintName("FK_consulta_cirugias");

                    b.Navigation("Catalogocirugia");

                    b.Navigation("ConsultaCirugias");
                });

            modelBuilder.Entity("MedicExpermedMT.Models.ConsultaDiagnostico", b =>
                {
                    b.HasOne("MedicExpermedMT.Models.Consultum", "ConsultaDiagnosticoNavigation")
                        .WithMany("ConsultaDiagnosticos")
                        .HasForeignKey("ConsultaDiagnosticoId")
                        .IsRequired()
                        .HasConstraintName("FK_consulta_diagnostico");

                    b.HasOne("MedicExpermedMT.Models.Diagnostico", "Diagnostico")
                        .WithMany("ConsultaDiagnosticos")
                        .HasForeignKey("DiagnosticoId")
                        .IsRequired()
                        .HasConstraintName("FK_consulta_diagnostico_diagnostico");

                    b.Navigation("ConsultaDiagnosticoNavigation");

                    b.Navigation("Diagnostico");
                });

            modelBuilder.Entity("MedicExpermedMT.Models.ConsultaImagen", b =>
                {
                    b.HasOne("MedicExpermedMT.Models.Consultum", "ConsultaImagenNavigation")
                        .WithMany("ConsultaImagens")
                        .HasForeignKey("ConsultaImagenId")
                        .IsRequired()
                        .HasConstraintName("FK_consulta_imagen");

                    b.HasOne("MedicExpermedMT.Models.Imagen", "Imagen")
                        .WithMany("ConsultaImagens")
                        .HasForeignKey("ImagenId")
                        .IsRequired()
                        .HasConstraintName("FK_consulta_imagen_imagen");

                    b.Navigation("ConsultaImagenNavigation");

                    b.Navigation("Imagen");
                });

            modelBuilder.Entity("MedicExpermedMT.Models.ConsultaLaboratorio", b =>
                {
                    b.HasOne("MedicExpermedMT.Models.Laboratorio", "CatalogoLaboratorio")
                        .WithMany("ConsultaLaboratorios")
                        .HasForeignKey("CatalogoLaboratorioId")
                        .IsRequired()
                        .HasConstraintName("FK_consulta_laboratorio_catalogo");

                    b.HasOne("MedicExpermedMT.Models.Consultum", "ConsultaLaboratorioNavigation")
                        .WithMany("ConsultaLaboratorios")
                        .HasForeignKey("ConsultaLaboratorioId")
                        .IsRequired()
                        .HasConstraintName("FK_consulta_laboratorio");

                    b.Navigation("CatalogoLaboratorio");

                    b.Navigation("ConsultaLaboratorioNavigation");
                });

            modelBuilder.Entity("MedicExpermedMT.Models.ConsultaMedicamento", b =>
                {
                    b.HasOne("MedicExpermedMT.Models.Consultum", "ConsultaMedicamentos")
                        .WithMany("ConsultaMedicamentos")
                        .HasForeignKey("ConsultaMedicamentosId")
                        .IsRequired()
                        .HasConstraintName("FK_consulta_medicamentos");

                    b.HasOne("MedicExpermedMT.Models.Medicamento", "Medicamento")
                        .WithMany("ConsultaMedicamentos")
                        .HasForeignKey("MedicamentoId")
                        .IsRequired()
                        .HasConstraintName("FK_medicamento");

                    b.Navigation("ConsultaMedicamentos");

                    b.Navigation("Medicamento");
                });

            modelBuilder.Entity("MedicExpermedMT.Models.Consultum", b =>
                {
                    b.HasOne("MedicExpermedMT.Models.Especialidad", "Especialidad")
                        .WithMany("Consulta")
                        .HasForeignKey("EspecialidadId")
                        .IsRequired()
                        .HasConstraintName("FK_consulta_especialidad");

                    b.HasOne("MedicExpermedMT.Models.Usuario", "MedicoConsultaDNavigation")
                        .WithMany("Consulta")
                        .HasForeignKey("MedicoConsultaD")
                        .IsRequired()
                        .HasConstraintName("FK_consulta_medico");

                    b.HasOne("MedicExpermedMT.Models.Paciente", "PacienteConsultaPNavigation")
                        .WithMany("Consulta")
                        .HasForeignKey("PacienteConsultaP")
                        .IsRequired()
                        .HasConstraintName("FK_consulta_paciente");

                    b.Navigation("Especialidad");

                    b.Navigation("MedicoConsultaDNavigation");

                    b.Navigation("PacienteConsultaPNavigation");
                });

            modelBuilder.Entity("MedicExpermedMT.Models.ExamenFisico", b =>
                {
                    b.HasOne("MedicExpermedMT.Models.Consultum", "Consulta")
                        .WithMany("ExamenFisicos")
                        .HasForeignKey("ConsultaId")
                        .IsRequired()
                        .HasConstraintName("FK_examen_fisico_consulta");

                    b.Navigation("Consulta");
                });

            modelBuilder.Entity("MedicExpermedMT.Models.Facturacion", b =>
                {
                    b.HasOne("MedicExpermedMT.Models.Citum", "Cita")
                        .WithMany("Facturacions")
                        .HasForeignKey("CitaId")
                        .IsRequired()
                        .HasConstraintName("FK_facturacion_cita");

                    b.Navigation("Cita");
                });

            modelBuilder.Entity("MedicExpermedMT.Models.Localidad", b =>
                {
                    b.HasOne("MedicExpermedMT.Models.Pai", "Pais")
                        .WithMany("Localidads")
                        .HasForeignKey("PaisId")
                        .HasConstraintName("FK_localidad_pais");

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("MedicExpermedMT.Models.OrganosSistema", b =>
                {
                    b.HasOne("MedicExpermedMT.Models.Consultum", "Consulta")
                        .WithMany("OrganosSistemas")
                        .HasForeignKey("ConsultaId")
                        .IsRequired()
                        .HasConstraintName("FK_organos_sistemas_consulta");

                    b.Navigation("Consulta");
                });

            modelBuilder.Entity("MedicExpermedMT.Models.Paciente", b =>
                {
                    b.HasOne("MedicExpermedMT.Models.Catalogo", "EstadocivilPacientesCaNavigation")
                        .WithMany("PacienteEstadocivilPacientesCaNavigations")
                        .HasForeignKey("EstadocivilPacientesCa")
                        .HasConstraintName("FK_pacientes_estadocivil");

                    b.HasOne("MedicExpermedMT.Models.Catalogo", "FormacionprofesionalPacientesCaNavigation")
                        .WithMany("PacienteFormacionprofesionalPacientesCaNavigations")
                        .HasForeignKey("FormacionprofesionalPacientesCa")
                        .HasConstraintName("FK_pacientes_formacionprofesional");

                    b.HasOne("MedicExpermedMT.Models.Pai", "NacionalidadPacientesPaNavigation")
                        .WithMany("Pacientes")
                        .HasForeignKey("NacionalidadPacientesPa")
                        .HasConstraintName("FK_pacientes_nacionalidad");

                    b.HasOne("MedicExpermedMT.Models.Localidad", "ProvinciaPacientesLNavigation")
                        .WithMany("Pacientes")
                        .HasForeignKey("ProvinciaPacientesL")
                        .HasConstraintName("FK_pacientes_provincia");

                    b.HasOne("MedicExpermedMT.Models.Catalogo", "SegurosaludPacientesCaNavigation")
                        .WithMany("PacienteSegurosaludPacientesCaNavigations")
                        .HasForeignKey("SegurosaludPacientesCa")
                        .HasConstraintName("FK_pacientes_segurosalud");

                    b.HasOne("MedicExpermedMT.Models.Catalogo", "SexoPacientesCaNavigation")
                        .WithMany("PacienteSexoPacientesCaNavigations")
                        .HasForeignKey("SexoPacientesCa")
                        .HasConstraintName("FK_pacientes_sexo");

                    b.HasOne("MedicExpermedMT.Models.Catalogo", "TipodocumentoPacientesCaNavigation")
                        .WithMany("PacienteTipodocumentoPacientesCaNavigations")
                        .HasForeignKey("TipodocumentoPacientesCa")
                        .HasConstraintName("FK_pacientes_tipodocumento");

                    b.HasOne("MedicExpermedMT.Models.Catalogo", "TiposangrePacientesCaNavigation")
                        .WithMany("PacienteTiposangrePacientesCaNavigations")
                        .HasForeignKey("TiposangrePacientesCa")
                        .HasConstraintName("FK_pacientes_tiposangre");

                    b.Navigation("EstadocivilPacientesCaNavigation");

                    b.Navigation("FormacionprofesionalPacientesCaNavigation");

                    b.Navigation("NacionalidadPacientesPaNavigation");

                    b.Navigation("ProvinciaPacientesLNavigation");

                    b.Navigation("SegurosaludPacientesCaNavigation");

                    b.Navigation("SexoPacientesCaNavigation");

                    b.Navigation("TipodocumentoPacientesCaNavigation");

                    b.Navigation("TiposangrePacientesCaNavigation");
                });

            modelBuilder.Entity("MedicExpermedMT.Models.TokensSesion", b =>
                {
                    b.HasOne("MedicExpermedMT.Models.Usuario", "Usuario")
                        .WithMany("TokensSesions")
                        .HasForeignKey("UsuarioId")
                        .IsRequired()
                        .HasConstraintName("FK__tokens_se__usuar__4D5F7D71");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("MedicExpermedMT.Models.Usuario", b =>
                {
                    b.HasOne("MedicExpermedMT.Models.Especialidad", "Especialidad")
                        .WithMany("Usuarios")
                        .HasForeignKey("EspecialidadId")
                        .HasConstraintName("FK_usuario_especialidad");

                    b.HasOne("MedicExpermedMT.Models.Establecimiento", "Establecimiento")
                        .WithMany("Usuarios")
                        .HasForeignKey("EstablecimientoId")
                        .HasConstraintName("FK_usuario_establecimiento");

                    b.HasOne("MedicExpermedMT.Models.Perfil", "Perfil")
                        .WithMany("Usuarios")
                        .HasForeignKey("PerfilId")
                        .HasConstraintName("FK_usuario_perfil");

                    b.Navigation("Especialidad");

                    b.Navigation("Establecimiento");

                    b.Navigation("Perfil");
                });

            modelBuilder.Entity("MedicExpermedMT.Models.Catalogo", b =>
                {
                    b.Navigation("AntecedentesFamiliareParentescocatalogoCancerNavigations");

                    b.Navigation("AntecedentesFamiliareParentescocatalogoCardiopatiaNavigations");

                    b.Navigation("AntecedentesFamiliareParentescocatalogoDiabetesNavigations");

                    b.Navigation("AntecedentesFamiliareParentescocatalogoEnfcardiovascularNavigations");

                    b.Navigation("AntecedentesFamiliareParentescocatalogoEnfinfecciosaNavigations");

                    b.Navigation("AntecedentesFamiliareParentescocatalogoEnfmentalNavigations");

                    b.Navigation("AntecedentesFamiliareParentescocatalogoHipertensionNavigations");

                    b.Navigation("AntecedentesFamiliareParentescocatalogoMalformacionNavigations");

                    b.Navigation("AntecedentesFamiliareParentescocatalogoOtroNavigations");

                    b.Navigation("AntecedentesFamiliareParentescocatalogoTuberculosisNavigations");

                    b.Navigation("ConsultaAlergia");

                    b.Navigation("ConsultaCirugia");

                    b.Navigation("PacienteEstadocivilPacientesCaNavigations");

                    b.Navigation("PacienteFormacionprofesionalPacientesCaNavigations");

                    b.Navigation("PacienteSegurosaludPacientesCaNavigations");

                    b.Navigation("PacienteSexoPacientesCaNavigations");

                    b.Navigation("PacienteTipodocumentoPacientesCaNavigations");

                    b.Navigation("PacienteTiposangrePacientesCaNavigations");
                });

            modelBuilder.Entity("MedicExpermedMT.Models.Citum", b =>
                {
                    b.Navigation("Facturacions");
                });

            modelBuilder.Entity("MedicExpermedMT.Models.Consultum", b =>
                {
                    b.Navigation("AntecedentesFamiliares");

                    b.Navigation("Cita");

                    b.Navigation("ConsultaAlergia");

                    b.Navigation("ConsultaCirugia");

                    b.Navigation("ConsultaDiagnosticos");

                    b.Navigation("ConsultaImagens");

                    b.Navigation("ConsultaLaboratorios");

                    b.Navigation("ConsultaMedicamentos");

                    b.Navigation("ExamenFisicos");

                    b.Navigation("OrganosSistemas");
                });

            modelBuilder.Entity("MedicExpermedMT.Models.Diagnostico", b =>
                {
                    b.Navigation("ConsultaDiagnosticos");
                });

            modelBuilder.Entity("MedicExpermedMT.Models.Especialidad", b =>
                {
                    b.Navigation("Consulta");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("MedicExpermedMT.Models.Establecimiento", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("MedicExpermedMT.Models.Imagen", b =>
                {
                    b.Navigation("ConsultaImagens");
                });

            modelBuilder.Entity("MedicExpermedMT.Models.Laboratorio", b =>
                {
                    b.Navigation("ConsultaLaboratorios");
                });

            modelBuilder.Entity("MedicExpermedMT.Models.Localidad", b =>
                {
                    b.Navigation("Pacientes");
                });

            modelBuilder.Entity("MedicExpermedMT.Models.Medicamento", b =>
                {
                    b.Navigation("ConsultaMedicamentos");
                });

            modelBuilder.Entity("MedicExpermedMT.Models.Paciente", b =>
                {
                    b.Navigation("Cita");

                    b.Navigation("Consulta");
                });

            modelBuilder.Entity("MedicExpermedMT.Models.Pai", b =>
                {
                    b.Navigation("Localidads");

                    b.Navigation("Pacientes");
                });

            modelBuilder.Entity("MedicExpermedMT.Models.Perfil", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("MedicExpermedMT.Models.Usuario", b =>
                {
                    b.Navigation("Cita");

                    b.Navigation("Consulta");

                    b.Navigation("TokensSesions");
                });
#pragma warning restore 612, 618
        }
    }
}
